//! Instruction Set Architecture as defined by the ELF format.



#![allow(dead_code)]



#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u16)]
pub enum InstructionSet {
    None       = 0x000,
    ATT        = 0x001,
    SPARC      = 0x002,
    X86        = 0x003,
    M68k       = 0x004,
    M88k       = 0x005,
    IntelMCU   = 0x006,
    Intel80860 = 0x007,
    MIPS       = 0x008,
    IBM370     = 0x009,
    MIPSRS3000 = 0x00A,
    PARISC     = 0x00E,

    VPP500     = 0x011,
    SPARCPlus  = 0x012,
    Intel80960 = 0x013,
    PowerPC    = 0x014,
    PowerPCX64 = 0x015,
    IBM390     = 0x016,
    IBMSPU     = 0x017,

    V800       = 0x024,
    FR20       = 0x025,
    TRWRH32    = 0x026,
    MRCE       = 0x027,
    Aarch32    = 0x028,
    DigAlpha   = 0x029,
    SuperH     = 0x02A,
    SPARCV9    = 0x02B,
    SiemensTri = 0x02C,
    Argonaut   = 0x02D,
    H8300      = 0x02E,
    H8300H     = 0x02F,

    H8S        = 0x030,
    H8500      = 0x031,
    IA64       = 0x032,
    MIPSX      = 0x033,
    MColdFire  = 0x034,
    M68HC12    = 0x035,
    FujitsiMMA = 0x036,
    SiemensPCP = 0x037,
    SonyNCPU   = 0x038,
    DensoNDR1  = 0x039,
    MStarCore  = 0x03A,
    ToyotaME16 = 0x03B,
    ST100      = 0x03C,
    TinyJ      = 0x03D,
    AMD64      = 0x03E,
    SonyDSP    = 0x03F,

    PDP10      = 0x040,
    PDP11      = 0x041,
    FX66       = 0x042,
    ST9PLUS    = 0x043,
    ST7        = 0x044,
    MC68HC16   = 0x045,
    MC68HC11   = 0x046,
    MC68HC08   = 0x047,
    MC68HC05   = 0x048,
    SVx        = 0x049,
    ST19       = 0x04A,
    DigitalVAX = 0x04B,
    Cris       = 0x04C,
    Javelin    = 0x04D,
    Firepath   = 0x04E,
    ZSP        = 0x04F,

    MMIX       = 0x050,
    HUANY      = 0x051,
    Prism      = 0x052,
    AVR        = 0x053,
    FR30       = 0x054,
    D10V       = 0x055,
    D30V       = 0x056,
    MV850      = 0x057,
    M32R       = 0x058,
    MN10300    = 0x059,
    MN10200    = 0x05A,
    PicoJava   = 0x05B,
    OpenRISC   = 0x05C,
    ARCCompact = 0x05D,
    XTensa     = 0x05E,
    VideoCore  = 0x05F,

    TMMGPP     = 0x060,
    NS32K      = 0x061,
    TPC        = 0x062,
    SNP1000    = 0x063,
    ST200      = 0x064,
    IP2K       = 0x065,
    MAX        = 0x066,
    CR         = 0x067,
    F2MC16     = 0x068,
    MSP430     = 0x069,
    Blackfin   = 0x06A,
    SEC33      = 0x06B,
    SEP        = 0x06C,
    ARCA       = 0x06D,
    UNICORE    = 0x06E,
    EXCESS     = 0x06F,

    TMS320C    = 0x08C,

    Aarch64    = 0x0B7,

    RISCV      = 0x0F3,
    BPF        = 0x0F7,

    WDC65C816  = 0x101,
}

impl core::convert::From<u16> for InstructionSet {
    fn from(d: u16) -> InstructionSet {
        use InstructionSet::*;

        match d {
            0x001 => ATT       ,
            0x002 => SPARC     ,
            0x003 => X86       ,
            0x004 => M68k      ,
            0x005 => M88k      ,
            0x006 => IntelMCU  ,
            0x007 => Intel80860,
            0x008 => MIPS      ,
            0x009 => IBM370    ,
            0x00A => MIPSRS3000,
            0x00E => PARISC    ,

            0x011 => VPP500    ,
            0x012 => SPARCPlus ,
            0x013 => Intel80960,
            0x014 => PowerPC   ,
            0x015 => PowerPCX64,
            0x016 => IBM390    ,

            0x024 => V800      ,
            0x025 => FR20      ,
            0x026 => TRWRH32   ,
            0x027 => MRCE      ,
            0x028 => Aarch32   ,
            0x029 => DigAlpha  ,
            0x02A => SuperH    ,
            0x02B => SPARCV9   ,
            0x02C => SiemensTri,
            0x02D => Argonaut  ,
            0x02E => H8300     ,
            0x02F => H8300H    ,

            0x032 => IA64      ,
            0x033 => MIPSX     ,
            0x034 => MColdFire ,
            0x035 => M68HC12   ,
            0x036 => FujitsiMMA,
            0x037 => SiemensPCP,
            0x038 => SonyNCPU  ,
            0x039 => DensoNDR1 ,
            0x03A => MStarCore ,
            0x03B => ToyotaME16,
            0x03C => ST100     ,
            0x03D => TinyJ     ,
            0x03E => AMD64     ,
            0x03F => SonyDSP   ,

            0x040 => PDP10     ,
            0x041 => PDP11     ,
            0x042 => FX66      ,
            0x043 => ST9PLUS   ,
            0x044 => ST7       ,
            0x045 => MC68HC16  ,
            0x046 => MC68HC11  ,
            0x047 => MC68HC08  ,
            0x048 => MC68HC05  ,
            0x049 => SVx       ,
            0x04A => ST19      ,
            0x04B => DigitalVAX,
            0x04C => Cris      ,
            0x04D => Javelin   ,
            0x04E => Firepath  ,
            0x04F => ZSP       ,

            0x050 => MMIX      ,
            0x051 => HUANY     ,
            0x052 => Prism     ,
            0x053 => AVR       ,
            0x054 => FR30      ,
            0x055 => D10V      ,
            0x056 => D30V      ,
            0x057 => MV850     ,
            0x058 => M32R      ,
            0x059 => MN10300   ,
            0x05A => MN10200   ,
            0x05B => PicoJava  ,
            0x05C => OpenRISC  ,
            0x05D => ARCCompact,
            0x05E => XTensa    ,
            0x05F => VideoCore ,

            0x060 => TMMGPP    ,
            0x061 => NS32K     ,
            0x062 => TPC       ,
            0x063 => SNP1000   ,
            0x064 => ST200     ,
            0x065 => IP2K      ,
            0x066 => MAX       ,
            0x067 => CR        ,
            0x068 => F2MC16    ,
            0x069 => MSP430    ,
            0x06A => Blackfin  ,
            0x06B => SEC33     ,
            0x06C => SEP       ,
            0x06D => ARCA      ,
            0x06E => UNICORE   ,
            0x06F => EXCESS    ,

            0x08C => TMS320C,

            0x0B7 => Aarch64,

            0x0F3 => RISCV,
            0x0F7 => BPF,

            0x101 => WDC65C816,

            _ => InstructionSet::None,
        }
    }
}

impl core::fmt::Display for InstructionSet {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        use InstructionSet::*;

        let arg = match *self {
            None       => "No arch defined",
            ATT        => "AT&T WE 32100",
            SPARC      => "SPARC",
            X86        => "x86",
            M68k       => "Motorola M68000 (M68k)",
            M88k       => "Motorola M88000 (M88k)",
            IntelMCU   => "Intel MCU",
            Intel80860 => "Intel 80860",
            MIPS       => "MIPS",
            IBM370     => "IBM System / 370",
            MIPSRS3000 => "MIPS RS3000 Little-endian",
            PARISC     => "Hewlett-Packard PA-RISC",

            VPP500     => "Fujitsu VPP500",
            SPARCPlus  => "Enhanced Instruction Set SPARC32Plus",
            Intel80960 => "Intel 80960",
            PowerPC    => "PowerPC",
            PowerPCX64 => "Power PC (64-bit)",
            IBM390     => "IBM System / 390",
            IBMSPU     => "UNKNOWN",


            V800       => "NEC V800",
            FR20       => "Fujitsu FR20",
            TRWRH32    => "TRW RH-32",
            MRCE       => "Motorola RCE",
            Aarch32    => "Aarch32 / ARMv7",
            DigAlpha   => "Digital Alpha",
            SuperH     => "Hitachi SuperH",
            SPARCV9    => "SPARC V9",
            SiemensTri => "Siemens TriCore",
            Argonaut   => "Argonaut RISC Core",
            H8300      => "Hitachi H8/300",
            H8300H     => "Hitachi H8/300H",

            H8S        => "Hitachi H8S",
            H8500      => "Hitachi H8/500",
            IA64       => "IA-64",
            MIPSX      => "UNKNOWN",
            MColdFire  => "UNKNOWN",
            M68HC12    => "UNKNOWN",
            FujitsiMMA => "UNKNOWN",
            SiemensPCP => "UNKNOWN",
            SonyNCPU   => "UNKNOWN",
            DensoNDR1  => "UNKNOWN",
            MStarCore  => "UNKNOWN",
            ToyotaME16 => "UNKNOWN",
            ST100      => "UNKNOWN",
            TinyJ      => "UNKNOWN",
            AMD64      => "amd64",
            SonyDSP    => "UNKNOWN",

            PDP10      => "UNKNOWN",
            PDP11      => "UNKNOWN",
            FX66       => "UNKNOWN",
            ST9PLUS    => "UNKNOWN",
            ST7        => "UNKNOWN",
            MC68HC16   => "UNKNOWN",
            MC68HC11   => "UNKNOWN",
            MC68HC08   => "UNKNOWN",
            MC68HC05   => "UNKNOWN",
            SVx        => "UNKNOWN",
            ST19       => "UNKNOWN",
            DigitalVAX => "UNKNOWN",
            Cris       => "UNKNOWN",
            Javelin    => "UNKNOWN",
            Firepath   => "UNKNOWN",
            ZSP        => "UNKNOWN",

            MMIX       => "UNKNOWN",
            HUANY      => "UNKNOWN",
            Prism      => "UNKNOWN",
            AVR        => "UNKNOWN",
            FR30       => "UNKNOWN",
            D10V       => "UNKNOWN",
            D30V       => "UNKNOWN",
            MV850      => "UNKNOWN",
            M32R       => "UNKNOWN",
            MN10300    => "UNKNOWN",
            MN10200    => "UNKNOWN",
            PicoJava   => "UNKNOWN",
            OpenRISC   => "UNKNOWN",
            ARCCompact => "UNKNOWN",
            XTensa     => "UNKNOWN",
            VideoCore  => "UNKNOWN",

            TMMGPP    => "UNKNOWN",
            NS32K     => "UNKNOWN",
            TPC       => "UNKNOWN",
            SNP1000   => "UNKNOWN",
            ST200     => "UNKNOWN",
            IP2K      => "UNKNOWN",
            MAX       => "UNKNOWN",
            CR        => "UNKNOWN",
            F2MC16    => "UNKNOWN",
            MSP430    => "UNKNOWN",
            Blackfin  => "UNKNOWN",
            SEC33     => "UNKNOWN",
            SEP       => "UNKNOWN",
            ARCA      => "UNKNOWN",
            UNICORE   => "UNKNOWN",
            EXCESS    => "UNKNOWN",

            TMS320C    => "TMS320C6000",

            Aarch64    => "ARM 64-bits (ARMv8 / Aarch64)",

            RISCV      => "RISC-V",
            BPF        => "Berkeley Packet Filter",

            WDC65C816  => "WDC 65C816",
        };

        write!(f, "{}", arg)
    }
}
